# -*- coding: utf-8 -*-
"""ITS69304_Group1_Asgn_SectionA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AeoxP0q4yUl9rg0SQintgBZas8Lp4-ci
"""

# Importing necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Import necessary library to ignore all futurewarning dialogs
import warnings
warnings.filterwarnings("ignore")

# Load the dataset and create a dataframe object "df"
df = pd.read_csv("staff_dataset.csv")

df

"""### 1. Determine the total number of attributes (columns)"""

# Determine the total number of attributes
print("Total number of attributes (columns):", len(df.columns))

"""### 2. assess the dataset's dimensions by identifying both the number of rows and columns"""

# Get the information of the dataset's dimensions (rows, columns)
df.shape

"""### 3. Calculate the average values for key attributes: 'Age', 'Monthly Income', and 'Years at Company'"""

ave_age = np.average(df["Age"]) # Average value for "Age" attribute
ave_monthly_income = np.average(df["MonthlyIncome"]) # Average value for "Monthly Income" attribute
ave_years_at_company = np.average(df["YearsAtCompany"]) # Average value for "Years at Company" attribute

# Rounding these average values to two decimal places to ensure precision in the analysis
print("Average age:", round(ave_age, 2))
print("Average Monthly Income:", round(ave_monthly_income, 2))
print("Average Years at Company:", round(ave_years_at_company, 2))

"""### 4. Finding both the minimum and maximum values in the "MonthlyIncome" attribute"""

print("Maximum Monthly Income:", max(df["MonthlyIncome"])) # Maximum value in the "MonthlyIncome" attribute
print("Minimum Monthly Income:", min(df["MonthlyIncome"])) # Minimun value in the "MonthlyIncome" attribute

"""### 5. Create a histogram plotting "MonthlyIncome" against the number of staff members"""

# Create a histogram plotting "MonthlyIncome" against the number of staff members
sns.histplot(df["MonthlyIncome"], kde = True, color = "blue")
plt.xlabel("Monthly Income Distribution") # label x as "Monthly Income Distribution"
plt.ylabel("Number of Staff Members") # label y as "Number of Staff Members"
plt.show() # display the histogram

"""### 6. Create a scatter plot to examine the relationship between "Years at Company" and "Monthly Income"
"""

# Use scatter plot, "YearsAtCompany" as x, and "MonthlyIncome" as y
plt.scatter(df["YearsAtCompany"], df["MonthlyIncome"], color = "blue")
plt.xlabel("Years at Company") # label x as "Years at Company"
plt.ylabel("Monthly Income") # label y as "Monthly Income"
plt.title("Relationship between Years at Company and Monthly Income") # label the title of this scatter plot
plt.show() # display the scatter plot

"""### 7. Calculate the correlation coefficient between Years at Company' and 'Monthly Income'"""

corr_coef = df[["MonthlyIncome", "YearsAtCompany"]].corr()
corr_coef

"""explain the correlation interpretation.

### 8. Further discussions
"""

# a. The range of monthly income at Company A
income_range = max(df["MonthlyIncome"]) - min(df["MonthlyIncome"])
print("The range of monthly income at Company A:", income_range)

max_income = max(df["MonthlyIncome"])
min_income = min(df["MonthlyIncome"])
print(f"Monthly Income ranges from {min_income} to {max_income}.")

# b. The most and least frequent monthly income values
income_freqs = df["MonthlyIncome"].value_counts()
print("The most frequent monthly income value:", income_freqs.idxmax())
print("The least frequent monthly income value:", income_freqs.idxmin())

# c. the overall distribution of monthly income values
sns.histplot(df["MonthlyIncome"], kde = True, color = "blue")
plt.xlabel("Monthly Income Distribution")
plt.ylabel("Number of Staff Members")
plt.title("Overall distribution of monthly income values")
plt.show()

from scipy.stats import linregress
from sklearn.metrics import r2_score

slope, intercept, r_value, p_value, std_err = linregress(df["YearsAtCompany"], df["MonthlyIncome"])
print(f"Slope is: {slope}")
print(f"Intercept is: {intercept}", "\n")

r2 = round(r_value ** 2, 4)
print(f"R-squared value is: {r2}")