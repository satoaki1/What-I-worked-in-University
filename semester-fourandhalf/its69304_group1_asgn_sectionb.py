# -*- coding: utf-8 -*-
"""ITS69304_Group1_Asgn_SectionB.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rzCl891dH6Z_JLfNjbMPDXyX8SoR_Rka

### Question 1
"""

# Importing Necessary Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import LabelEncoder # LabelEncoder from sklearn.preprocessing to encode categorical data
from sklearn.preprocessing import StandardScaler # StandardScaler from sklearn.preprocessing to normalize the data
from sklearn.model_selection import train_test_split # train_test_split from sklearn.model_selection to split the data
from sklearn.naive_bayes import GaussianNB # GaussianNB from sklearn.naive_bayes as the classifier
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay # confusion_matrix from sklearn.metrics
from sklearn.metrics import accuracy_score # accuracy_score from sklearn.metrics

import warnings
warnings.filterwarnings("ignore")

"""### Question 2"""

# Load the dataset staff_dataset.csv using pandas
df = pd.read_csv("staff_dataset.csv")

df

df.info()

df.describe()

df.shape

print(f"This dataset contains total of {len(df.columns)} attributes.")

df.isna().sum()

df = df.drop_duplicates()
df.shape

"""### Question 4"""

# Use LabelEncoder to convert 'BusinessTravel' and 'Attrition' into numeric form

# Initialize the LabelEncoder object le
le = LabelEncoder()

# Encode each categorical attribute into numeric
df['BusinessTravel'] = le.fit_transform(df['BusinessTravel'])
df['Attrition'] = le.fit_transform(df['Attrition'])

df

"""Business Travel
- 0: Non-Travel
- 1: Travel Frequently
- 2: Travel Rarely

Attrition
- 0: No
- 1: Yes

### Question 3
"""

# 'Age', 'BusinessTravel', 'MonthlyIncome', and 'JobSatisfaction' as input features
X = df[["Age", "BusinessTravel", "MonthlyIncome", "JobSatisfaction"]]

# 'Attrition' as the output target
y = df[["Attrition"]]

X

y

"""### Question 5"""

# Split the dataset into training and test sets, with a typical split being 70%-30%
X_train_1, X_test_1, y_train_1, y_test_1 = train_test_split(X, y, test_size = 0.3, random_state = 42)

# Split the dataset into training and test sets, with a typical split being 80%-20%
X_train_2, X_test_2, y_train_2, y_test_2 = train_test_split(X, y, test_size = 0.2, random_state = 42)

"""### Question 6"""

# Initialize the StandardScaler object
scaler = StandardScaler()

# Normalize the input features split by 70%-30%
X_norm_train_1 = scaler.fit_transform(X_train_1)
X_norm_test_1 = scaler.fit_transform(X_test_1)

# Normalize the input features split by 80%-20%
X_norm_train_2 = scaler.fit_transform(X_train_2)
X_norm_test_2 = scaler.fit_transform(X_test_2)

"""### Question 7

**Train the Gaussian Naive Bayes model with the dataset split by 70%-30%**
"""

# Initialize the Gaussian Naive Bayes classifier object
GNB_1 = GaussianNB()

# Fit the model into the dataset, and train GaussianNB
GNB_1.fit(X_train_1, y_train_1)

# Make a prediction
y_pred_1 = GNB_1.predict(X_test_1)

"""**Train the Gaussian Naive Bayes model with the normalized dataset split by 70%-30%**"""

# Initialize the Gaussian Naive Bayes classifier object
GNB_norm_1 = GaussianNB()

# Fit the model into the dataset, and train GaussianNB
GNB_norm_1.fit(X_norm_train_1, y_train_1)

# Make a prediction
y_norm_pred_1 = GNB_norm_1.predict(X_norm_test_1)

"""**Train the Gaussian Naive Bayes model with the dataset split by 80%-20%**"""

# Initialize the Gaussian Naive Bayes classifier object
GNB_2 = GaussianNB()

# Fit the model into the dataset, and train GaussianNB
GNB_2.fit(X_train_2, y_train_2)

# Make a prediction
y_pred_2 = GNB_2.predict(X_test_2)

"""**Train the Gaussian Naive Bayes model with the normalized dataset split by 80%-20%**"""

# Initialize the Gaussian Naive Bayes classifier object
GNB_norm_2 = GaussianNB()

# Fit the model into the dataset, and train GaussianNB
GNB_norm_2.fit(X_norm_train_2, y_train_2)

# Make a prediction
y_norm_pred_2 = GNB_norm_2.predict(X_norm_test_2)

"""### Question 8

**Evaluation of prediction generated by the Gaussian Naive Bayes model with the dataset split by 70%-30%**
"""

# Evaluation with Confusion Matrix Illustration
GNB_cm = confusion_matrix(y_test_1, y_pred_1)
sns.set_context("notebook")
ConfusionMatrixDisplay(confusion_matrix = GNB_cm, display_labels = GNB_1.classes_).plot()

# Accuracy score on the prediction
accuracy_test = round(accuracy_score(y_test_1, y_pred_1), 4)
print("================================")
print(f'Accuracy on Test Dataset: {accuracy_test}')
print("================================")

"""**Evaluation of prediction generated by the Gaussian Naive Bayes model with normalized dataset split by 70%-30%**"""

# Evaluation with Confusion Matrix Illustration
GNB_norm_cm = confusion_matrix(y_test_1, y_norm_pred_1)
sns.set_context("notebook")
ConfusionMatrixDisplay(confusion_matrix = GNB_norm_cm, display_labels = GNB_norm_1.classes_).plot()

# Accuracy score on the prediction
accuracy_test_norm = round(accuracy_score(y_test_1, y_norm_pred_1), 4)
print("================================")
print(f'Accuracy on Test Dataset: {accuracy_test_norm}')
print("================================")

"""**Evaluation of prediction generated by the Gaussian Naive Bayes model with the dataset split by 80%-20%**"""

# Evaluation with Confusion Matrix Illustration
GNB_cm_2 = confusion_matrix(y_test_2, y_pred_2)
sns.set_context("notebook")
ConfusionMatrixDisplay(confusion_matrix = GNB_cm_2, display_labels = GNB_2.classes_).plot()

# Accuracy score on the prediction
accuracy_test_2 = round(accuracy_score(y_test_2, y_pred_2), 4)
print("================================")
print(f'Accuracy on Test Dataset: {accuracy_test_2}')
print("================================")

"""**Evaluation of prediction generated by the Gaussian Naive Bayes model with normalized dataset split by 80%-20%**"""

# Evaluation with Confusion Matrix Illustration
GNB_norm_cm_2 = confusion_matrix(y_test_2, y_norm_pred_2)
sns.set_context("notebook")
ConfusionMatrixDisplay(confusion_matrix = GNB_norm_cm_2, display_labels = GNB_norm_2.classes_).plot()

# Accuracy score on the prediction
accuracy_norm_test_2 = round(accuracy_score(y_test_2, y_norm_pred_2), 4)
print("================================")
print(f'Accuracy on Test Dataset: {accuracy_norm_test_2}')
print("================================")